üöÄ SETUP FREE PostgreSQL WITH NEON
===================================

GOAL: Create free PostgreSQL ‚Üí Use in BOTH local dev + production
Result: Same database everywhere = zero sync issues!

STEP 1: CREATE NEON ACCOUNT (2 minutes)
=======================================

1. Go to: https://neon.tech
2. Click "Sign up" (top right)
3. Sign up with:
   - Email
   - Or GitHub (easier)
4. Verify email
5. Done!

STEP 2: CREATE PROJECT
======================

1. After login, click "New Project" (or "Create Project")
2. Fill in:
   - Project name: "LRBillingDB" (or any name)
   - Region: Pick closest to you (US-East recommended)
3. Click "Create project"
4. Wait 30 seconds for setup

STEP 3: GET CONNECTION STRING
=============================

After project created:

1. You'll see a dashboard
2. Look for "Connection string" section
3. You should see a field like:
   
   postgresql://[user]:[password]@[host]/[database]

4. Click the copy button (or select all)
5. Copy the entire URL

WHAT YOU'LL COPY:

  postgresql://neondb_owner:XXXXX@ep-XXXXX-XXXXX.us-east-1.neon.tech/neondb?sslmode=require

Keep this safe! This is your DATABASE_URL

STEP 4: UPDATE LOCAL .env.local
===============================

‚ö†Ô∏è  NOTE: Can't edit .env.local directly due to system restrictions.

Instead, create a new file:

1. In VSCode, go to: .env.local
2. Replace content with:
   
   DATABASE_URL="postgresql://..." (paste your URL here)

Or use command:
   
   $url="postgresql://..."  # Your URL
   Set-Content -Path .env.local -Value "DATABASE_URL=`"$url`""

STEP 5: TEST CONNECTION LOCALLY
===============================

Test if it works:

1. Open terminal
2. Run:
   
   npx prisma migrate deploy

   This should:
   - Connect to Neon
   - Create schema
   - Say "Migrations are up to date"

3. If successful:
   ‚úì Connection works!

STEP 6: VIEW DATABASE
====================

See your database:

1. Command:
   
   npx prisma studio

2. Opens browser window
3. Should be empty (no data yet)
4. This confirms connection works!

STEP 7: ADD TO RAILWAY PRODUCTION
=================================

Same URL used for production!

1. Go to Railway: https://railway.app
2. Your project ‚Üí Web service
3. Click "Variables" tab
4. Add new variable:
   
   KEY: DATABASE_URL
   VALUE: postgresql://... (paste same URL)

5. Save
6. Railway auto-deploys
7. Connection set!

STEP 8: VERIFY EVERYTHING
=========================

Local:
  npx prisma studio
  # Should show empty database

Production:
  Visit your deployed site
  # Should work, connect to same DB

Both using SAME database URL! ‚úì

TESTING IT ALL:
===============

1. Add data locally:
   - Go to: http://localhost:3000
   - Create a test LR
   - Should save to Neon

2. Check it appeared:
   - npx prisma studio
   - Should see your LR!

3. Deploy:
   - git push
   - Railway deploys

4. Check production:
   - Visit deployed site
   - Should see same LR!
   - Same database!

NO SYNC ISSUES! ‚úì

BENEFITS OF THIS SETUP:
=======================

‚úì Single source of truth (one database)
‚úì No data sync needed
‚úì Always developing against real data
‚úì Production = development database
‚úì Free tier (3 projects)
‚úì 5GB storage included
‚úì Can share URL with team
‚úì Super fast development

IMPORTANT NOTES:
================

DATABASE_URL for both:
  - Local development: .env.local
  - Production: Railway Variables
  ‚Üí SAME URL in both places!

This means:
  - Your local dev data = production data
  - When you test locally, you test on real data
  - No separate databases
  - No migrations to sync
  - Always in sync!

‚ö†Ô∏è  BE CAREFUL:
  - Delete operations in dev affect production
  - Test with test data first
  - But this is actually safer (know what data is where)

NEON LIMITS (Free Tier):
=======================

  ‚Ä¢ 3 projects
  ‚Ä¢ 5GB storage (enough for ~100k records)
  ‚Ä¢ 20 connections
  ‚Ä¢ Branches (advanced feature)
  ‚Ä¢ Perfect for dev + small production

If you outgrow free tier:
  - Upgrade to paid ($0.10/GB/month)
  - Or use Railway ($0.39/hour for database)

TROUBLESHOOTING:
================

Can't connect?
  ‚Üí Check URL is copied correctly
  ‚Üí No typos?
  ‚Üí Try: npx prisma generate

Neon dashboard shows no data?
  ‚Üí That's OK, query data from app

Can't see data in prisma studio?
  ‚Üí Make sure you added some LRs first
  ‚Üí Go to http://localhost:3000 ‚Üí create LR

SSL error?
  ‚Üí Neon uses SSL by default
  ‚Üí Make sure URL includes ?sslmode=require
  ‚Üí It should be in the copied URL

BACKING UP DATA:
================

Neon automatically backs up, but:

1. Download SQL dump:
   - Neon dashboard ‚Üí Backups
   - Or use: pg_dump

2. Keep locally for safety

3. If needed, restore from Neon

MIGRATING LATER:
================

If you want to move to Railway full PostgreSQL:

1. Export from Neon
2. Import to Railway
3. Update DATABASE_URL in both places
4. Done!

Easy migration path!

SCALING UP:
===========

As you grow:

Free Neon:  5GB = OK for dev/test
Paid Neon:  $0.10/GB = Production-ready
Railway:    $0.39/hour = More powerful

All use PostgreSQL, migration is easy!

TEAM COLLABORATION:
===================

Share same DATABASE_URL with team:

1. Get URL from Neon
2. Share with team (not in git!)
3. Each team member:
   - Adds to .env.local
   - Uses: npm run dev
   - Connects to same DB
   - Everyone sees same data
   - Zero sync issues!

QUICK SUMMARY:
==============

1. Create free Neon account: https://neon.tech
2. Create project
3. Copy connection URL
4. Update .env.local with URL
5. Update Railway variables with same URL
6. Test: npm run dev
7. Verify: npx prisma studio
8. Done!

Now you have:
  ‚úì Same database locally + production
  ‚úì Free ($0)
  ‚úì Always in sync
  ‚úì Easy to scale
  ‚úì Team-ready

Questions?
  Neon docs: https://neon.tech/docs
