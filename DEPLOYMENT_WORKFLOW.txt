üöÄ SAFE DEPLOYMENT WORKFLOW
============================

FOR EVERY DEPLOYMENT - FOLLOW THIS PROCESS:

STEP 1: LOCAL DEVELOPMENT & TESTING
====================================

1. Make your code changes (features, bug fixes, UI, etc.)

2. Test locally:
   npm run dev
   # Visit http://localhost:3000
   # Test all your changes
   # Check browser console (F12) for errors

3. View local database:
   npx prisma studio
   # Verify data looks correct

STEP 2: DATABASE MIGRATIONS (If schema changed)
===============================================

If you DIDN'T change schema.prisma, skip to Step 3.

If you DID change schema.prisma:

1. Create migration:
   npm run db:migrate --name "describe_your_change"
   
   Examples:
   npm run db:migrate --name "add_billStatus_field"
   npm run db:migrate --name "make_amount_required"
   npm run db:migrate --name "add_invoiceDate"

2. Review what it created:
   Open: prisma/migrations/[newest_folder]/migration.sql
   
   Verify it looks right - if not, you can modify it

3. Verify migration works:
   npx prisma studio
   # Should see your data still there

4. If something went wrong:
   # Local SQLite can be reset (it's just dev data):
   rm prisma/dev.db*
   npm run dev
   # Will recreate fresh DB with new schema

STEP 3: GIT COMMIT & PUSH
=========================

1. Check what changed:
   git status

2. Stage all changes:
   git add .

3. Commit with message:
   git commit -m "feat: describe what you changed"
   
   Examples:
   git commit -m "feat: add bill status tracking"
   git commit -m "fix: resolve LR deletion bug"
   git commit -m "refactor: improve dashboard performance"

4. Push to GitHub:
   git push

STEP 4: RAILWAY AUTO-DEPLOY (Automatic)
========================================

When you push, Railway automatically:

1. Detects the push
2. Pulls your code
3. Runs: npm install
4. Runs: npm run build
5. Runs: npx prisma migrate deploy ‚Üê IMPORTANT!
   (This applies migrations to production database)
6. Starts new server
7. Old server shuts down

During this time:
- ‚úì Data is SAFE
- ‚úì Migrations are applied
- ‚úì Code is updated
- ‚úì No data loss

STEP 5: POST-DEPLOY VERIFICATION
=================================

1. Check Railway dashboard:
   - Web service status should be green
   - No errors in logs

2. Test deployed site:
   - Visit your app URL
   - Test a few features
   - Check that data is there

3. If something is wrong:
   - Check Railway logs (Web service ‚Üí Logs)
   - Look for error messages
   - Usually easy to fix

DEPLOYMENT SAFETY RULES:
=======================

‚úÖ SAFE TO DO:
- Add new fields (make them optional with ?)
- Add new tables
- Update UI/components
- Fix bugs
- Add new API endpoints
- Make fields optional
- Rename fields (Prisma handles this)

‚úó DANGEROUS - AVOID:
- Deleting fields without backup
- Making required fields if existing data has NULLs
- Running: prisma migrate reset
- Force-pushing after migration
- Deleting migrations folder

‚úó NEVER ON PRODUCTION:
- prisma migrate reset (destroys all data!)
- Manual SQL changes
- Editing migration files after push

EXAMPLE DEPLOYMENT:
===================

Scenario: Add a new "invoiceDate" field to LRs

Step 1 - Local Dev:
  // Edit prisma/schema.prisma
  model LR {
    ...
    invoiceDate    String?  // NEW FIELD
  }

Step 2 - Create Migration:
  npm run db:migrate --name "add_invoiceDate"
  // Creates migration file

Step 3 - Test:
  npx prisma studio
  // Verify data still there

Step 4 - Git:
  git add .
  git commit -m "feat: add invoiceDate field"
  git push

Step 5 - Railway:
  (Auto-deploys, runs migration on prod DB)
  
Step 6 - Verify:
  Visit deployed site
  Check data is there
  Done!

HANDLING ERRORS:
================

Error: "Build failed"
  ‚Üí Check Railway logs
  ‚Üí Usually: syntax error in code
  ‚Üí Fix locally, commit, push again

Error: "Migration failed"
  ‚Üí Check migration.sql file syntax
  ‚Üí Verify schema.prisma is correct
  ‚Üí Test locally first: npm run db:migrate:deploy
  ‚Üí Fix and push again

Error: "Can't connect to database"
  ‚Üí Check if DATABASE_URL is set in Railway
  ‚Üí Check if PostgreSQL service is running
  ‚Üí Restart Railway service if needed

If Production Data is Corrupted:
  ‚Üí Don't panic - Railway has backups
  ‚Üí Railway ‚Üí PostgreSQL ‚Üí Backups
  ‚Üí Restore from previous date
  ‚Üí Then redeploy fixed code

ROLLBACK PROCESS:
=================

If you need to go back to previous version:

1. Find previous commit:
   git log  # See all commits

2. Reset locally:
   git reset --hard [commit-hash]

3. Push:
   git push --force
   (WARNING: use only if critical)

4. Railway auto-redeploys with old code
   (Database stays - no data loss!)

MULTI-DEVELOPER SETUP:
=====================

If multiple people deploy:

1. Always pull before working:
   git pull

2. Create feature branch:
   git checkout -b feature/your-feature

3. Work locally, test

4. Create migration if needed:
   npm run db:migrate --name "describe"

5. Commit and push feature branch:
   git add . && git commit && git push -u origin feature/your-feature

6. Create pull request on GitHub

7. Review code

8. Merge to main

9. Railway auto-deploys main branch

10. Database migrations applied safely

This prevents conflicts and ensures data safety!

DEPLOYMENT TIMELINE:
====================

Push ‚Üí Git receives (1 sec)
     ‚Üí Railway detects (2-5 sec)
     ‚Üí Install deps (30-60 sec)
     ‚Üí Build project (30-60 sec)
     ‚Üí Run migrations (5-10 sec)
     ‚Üí Start server (5-10 sec)
     ‚Üí Ready (90-150 sec total)

During this time: Site is down briefly (20-30 sec)
After: Everything is updated and running

MONITORING:
===========

Check deployment status:
- Railway dashboard ‚Üí Web service ‚Üí Deployments
- Shows current and past deployments
- Shows success/failure
- Shows logs for troubleshooting

Check database status:
- Railway ‚Üí PostgreSQL ‚Üí Data
- See current records
- Verify data integrity

BACKUP BEFORE MAJOR CHANGES:
============================

Before big deployments:
1. Railway ‚Üí PostgreSQL ‚Üí Backups
2. Manually trigger backup if option available
3. Or just note the date
4. If something breaks, you can restore

Best Practice:
- Railway keeps 7 days of backups
- Automatic and free
- Just restore from dashboard if needed

QUICK CHECKLIST:
================

Before each deployment:

‚úì Code changes made locally
‚úì Tested with: npm run dev
‚úì No console errors (F12)
‚úì Database checked: npx prisma studio
‚úì Migration created (if schema changed)
‚úì Reviewed migration file
‚úì git add .
‚úì git commit -m "..."
‚úì git push
‚úì Railway deploy started
‚úì Logs show success
‚úì Visited deployed site
‚úì Tested functionality

SUMMARY:
========

Safe deployment process:

1. Code locally + test
2. Create migration if needed
3. Git commit & push
4. Railway auto-deploys with safe migrations
5. Data preserved
6. Done!

Your database is PERSISTENT across all deployments!

Questions? Check Prisma docs:
https://www.prisma.io/docs/orm/prisma-migrate
